window.divided?= {}
window.divided.playerRenderer = (options) ->
  {
    scaler,
    game,
    loadingText,
    directingPlayerUuid,
    extConfig
  } = options

  {xPosToX,yPosToY} = scaler
  
  waitingMap = {}
  choosingUuids = []
  waitingIcons = game.add.group()
  spritesByUuid = {}
  bodies = game.add.group()

  obj = {
    newWaitingDoom: (xPos,yPos,uuid) ->
      doom = game.add.sprite(xPosToX(xPos), yPosToY(yPos), 'ninja')
      doom.anchor.x = 0.5
      doom.anchor.y = 2/3
      doom.currentPos = [xPos,yPos]
      doom.uuid = uuid
      doom.smoothed = false
      doom.scale.set(scaler.scale)

      spritesByUuid[uuid] = doom

      if uuid == directingPlayerUuid
        doom.blip = game.add.sprite(0,-12,'player_blip',false)
        doom.blip.anchor.setTo(0.5)
        doom.blip.scale.set(0.25)
        doom.blip.smoothed = false
        doom.addChild(doom.blip)
        loadingText.destroy()

      return doom
    markAsChoosing: (uuid) ->
      if uuid != directingPlayerUuid
        choosingUuids.push(uuid)

    markAsWaiting: (uuid) ->
      img = waitingMap[uuid]
      if !img
        return
      game.add.tween(img)
        .to({y: img.y-20, alpha: 0},200,Phaser.Easing.Default,true)
        .onComplete.add(() ->
          img.kill()
        )
      delete waitingMap[uuid]

    markAllWaiting: () ->
      $.each(waitingMap, (uuid,_) ->
        obj.markAsWaiting(uuid)
      )
      waitingMap = {}
      choosingUuids = []

    displayAllChoosing: () ->
      $.each($.unique(choosingUuids), (i, uuid) ->
        sprite = spritesByUuid[uuid]
        if !sprite || waitingMap[uuid]
          return

        pos = sprite.currentPos

        icon = waitingIcons.getFirstDead()
        x = xPosToX(pos[0])-5*scaler.scale
        y = yPosToY(pos[1])-14*scaler.scale

        if icon
          icon.reset(x,y)
          icon.alpha = 1
        else
          icon = waitingIcons.create(x,y,'hourglass')
          icon.smoothed = false
          icon.scale.set(scaler.scale/4)

        game.add.tween(icon).to({y: y-10},500,Phaser.Easing.Default,true,0,Number.MAX_VALUE,true)
        waitingMap[uuid] = icon
      )
    moveSprite: (uuid,nPos) ->
      sprite = spritesByUuid[uuid]
      cPos = sprite.currentPos

      cPos[0] = nPos[0]
      cPos[1] = nPos[1]

      game.add.tween(sprite).to({
        x: xPosToX(cPos[0]),
        y: yPosToY(cPos[1])
      }, extConfig.animationDuration, Phaser.Easing.Cubic.InOut, true)
    isRenderingPlayer: (uuid) ->
      spritesByUuid[uuid]?
    killSprite: (uuid) ->
      sprite = spritesByUuid[uuid]
      delete spritesByUuid[uuid]
      sprite.angle = 180
      bodies.add(sprite)
    destroy: () ->
      bodies.destroy()
      waitingIcons.destroy()
      $.each(spritesByUuid, ((k,v) -> v.destroy()))
  }

window.divided.playerRenderer.preload = (game) ->
  game.load.image('ninja', <%= asset_path('ninja.png').inspect %>)