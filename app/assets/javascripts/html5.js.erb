//= require phaser.min
//= require move_matrix
//= require selection_overlay
//= require player_renderer
//= require player_pool

$(function() {
  var sliderContainer = {};
  var player_uuid = window._divided_player_uuid;
  var first_move = window._divided_first_move;

  var sliderChange =
  $('.slider').slider({min: 1, max: 5000,
    slide: function(event,ui){
      var varname = $(ui.handle.parentElement).data('variable');
      $('td#'+varname+'-display').html(ui.value);
      sliderContainer[varname] = ui.value;
    },
    create: function(event,ui){
      var target = $(event.target);
      var val = target.data('default');
      target.slider('option',{min: val/2, max: val*2});
      target.slider('value',target.data('default'));
      sliderContainer[target.data('variable')] = target.data('default');
    }
  });

  var background, walls, floor, cursors;
  var xPosToX = function(xPos) {
    return xPos*40+20+200;
  }
  var yPosToY = function(yPos) {
    return xPosToX(yPos)-100;
  }
  var xToXPos = function(x) {
    return Math.round((x-20-200)/40);
  }
  var yToYPos = function(y) {
    return xToXPos(y+100);
  }
  var turnCount = 0;

  var faye = new Faye.Client('/faye');

  var isPointerDown = false;
  var isDead = false;

  var turnTween;

  var TILE_SIZE = 40;

  var selectionOverlay;

  var resourceFromJSON = function(json) {
    var res = new Hyperagent.Resource();
    res._load(json);
    res.loaded = true;
    return res;
  }

  var loadingTextStyle = { font: "40px Arial", fill: "#ffffff", align: "center" };
  var loadingText;

  var game = new Phaser.Game(600, 600, Phaser.AUTO, 'divided-viewport', {
    init: function() {
      game.scale.scaleMode = Phaser.ScaleManager.RESIZE;
      game.scale.pageAlignHorizontally = true;
      game.scale.pageAlignVertically = true;
      game.world.setBounds(0,0,800,600);
      game.camera.x = 100;
      game.scale.refresh();
    },
    resize: function(x,y) {
      game.world.setBounds(0-(x-800)/2, 0-(y-600)/2, (x-800)/2+800, (y-600)/2+600);
      game.camera.x = 0-(x-800)/2;
      game.camera.y = 0-(y-600)/2;
    },
    preload: function() {
      loadingText = game.add.text(game.world.centerX, game.world.centerY, "Loading assets...", loadingTextStyle);
      loadingText.anchor.set(0.5);
      <%= %w(starfield.jpg slate_flooring_40x40.png 2x2brown40x40.png).map{|f| name=f.split('.').first; "game.load.image(#{name.inspect}, #{asset_path(f).inspect})" }.join(';') %>;
      window.divided.playerRenderer.preload(game);
      game.load.spritesheet('rgb_glow', <%= asset_path('rgb_120.png').inspect %>, 40, 40, 3);
      game.load.image('hourglass', <%= asset_path('hourglass_small.png').inspect %>);
      game.load.image('player_blip', <%= asset_path('green_blip_19.png').inspect %>);
    },
    create: function(){
      background = game.add.tileSprite(-1000, -1000, 3000, 3000, 'starfield');
      walls = game.add.group();
      walls.add(game.add.tileSprite(160,60,480,40,'slate_flooring_40x40'));
      walls.add(game.add.tileSprite(160,500,480,40,'slate_flooring_40x40'));
      walls.add(game.add.tileSprite(160,100,40,400,'slate_flooring_40x40'));
      walls.add(game.add.tileSprite(600,100,40,400,'slate_flooring_40x40'));
      floor = game.add.tileSprite(200,100,400,400,'2x2brown40x40');

      loadingText.destroy();
      loadingText = game.add.text(game.world.centerX, game.world.centerY, "Waiting to join...", loadingTextStyle);
      loadingText.anchor.set(0.5);

      selectionOverlay = window.divided.selectionOverlay({
        xPosToX:   xPosToX,
        yPosToY:   yPosToY,
        extConfig: sliderContainer,
        game:      game
      });

      playerPool = window.divided.playerPool({
        xPosToX:                xPosToX,
        yPosToY:                yPosToY,
        game:                   game,
        loadingText:            loadingText,
        directingPlayerUuid:    player_uuid,
        extConfig:              sliderContainer,
        onDirectingPlayerDeath: function() {
          isDead = true;
          turnTween.stop();
          background.alpha = 1;
          game.input.onUp.add(function(p) {
            location.reload();
          },this);
          game.stage.backgroundColor = '#FF0000';
          game.add.tween(background).to({alpha: 0.0},100,Phaser.Easing.Circular.In,true)
            .onComplete.add(function(){
              game.add.tween(background).to({alpha: 1.0},200,Phaser.Easing.Circular.Out,true)
                .onComplete.add(function(){
                  game.stage.backgroundColor = '#880000';
                  game.add.tween(background).to({alpha: 0.0},10000,Phaser.Easing.Circular.Out,true);
                });
            });
        }
      });

      faye.subscribe('/room_events/waiting', function(payload) {
        var data = JSON.parse(payload);
        if (data.current_round == turnCount) {
          playerPool.markAsWaiting(data.player_uuid);
        }
      });

      faye.subscribe('/room_events/advance', function(payload) {
        console.log('advance! '+payload);
        var data = JSON.parse(payload);
        turnCount = data.current_round+1;
        var stillThisRound = function() {
          return turnCount == data.current_round+1;
        }

        //TODO: Abstract out
        var hRound = resourceFromJSON(data.halRound);

        var hPlayer = $.grep(hRound.embedded.participants, function(participant,i) {
          return (participant.props.uuid == player_uuid);
        })[0];

        playerPool.nextRound(function(r) {
          $.each(data.players, function(uuid,pos) {
            if($.inArray(uuid, data.killed) >= 0) {
              r.register(uuid).at(pos[0],pos[1]).kill();
            } else {
              r.register(uuid).at(pos[0],pos[1]);
            }
          });
        });

        if(hPlayer !== undefined) {
          selectionOverlay.selectionForParticipant(hPlayer).then(function(val){
            if(stillThisRound()) {
              return val;
            } else {
              throw new Error("Selection made after round ended!");
            }
          }).then(function(val) {
            playerPool.displayAllChoosing();
            return val;
          }).done();
        }

        if(!isDead) {
          var doTween = function(){
            turnTween = game.add.tween(background).to({alpha: 0.0},4600,Phaser.Easing.Circular.In,true);
          }
          if(turnTween !== undefined) {
            turnTween.stop();
            turnTween = game.add.tween(background).to({alpha: 1},200,Phaser.Easing.Bounce.In,true);
            turnTween.onComplete.add(doTween);
          } else {
            doTween();
          }
        }
      }).then(function(){
        //faye subscription to turn advancement is now active
        var room = resourceFromJSON(window._divided_room);
        console.log(room.links['dv:join'].url());
        $.ajax({
          url: room.links['dv:join'].url(),
          headers: {
              'Uuid': player_uuid
          },
          method: 'POST',
          success: function(data){
            console.log('joined: '+data);
            //debugger;
          },
          error: function(error){
            //debugger
          }
        });
      });
    },
    update: function(){
    }
  });
});
