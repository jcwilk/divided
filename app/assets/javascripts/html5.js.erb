//= require phaser.min
//= require move_matrix
//= require selection_overlay

$(function() {
  var sliderContainer = {};
  var player_uuid = window._divided_player_uuid;
  var first_move = window._divided_first_move;

  var sliderChange =
  $('.slider').slider({min: 1, max: 5000,
    slide: function(event,ui){
      var varname = $(ui.handle.parentElement).data('variable');
      $('td#'+varname+'-display').html(ui.value);
      sliderContainer[varname] = ui.value;
    },
    create: function(event,ui){
      var target = $(event.target);
      var val = target.data('default');
      target.slider('option',{min: val/2, max: val*2});
      target.slider('value',target.data('default'));
      sliderContainer[target.data('variable')] = target.data('default');
    }
  });

  var background, walls, floor, cursors;
  var xPosToX = function(xPos) {
    return xPos*40+20+200;
  }
  var yPosToY = function(yPos) {
    return xPosToX(yPos)-100;
  }
  var xToXPos = function(x) {
    return Math.round((x-20-200)/40);
  }
  var yToYPos = function(y) {
    return xToXPos(y+100);
  }
  var turnCount = 0;
  var playerPosMap = {};

  var faye = new Faye.Client('/faye');

  var player;
  console.log(first_move);
  var souls, waitingIcons;
  var isPointerDown = false;
  var isDead = false;

  var turnTween;

  var FACE_WIDTH = 30;
  var FACE_HEIGHT = 32;
  var TILE_SIZE = 40;

  var mm = window.divided.moveMatrix();
  var selectionOverlay = window.divided.selectionOverlay({
    xPosToX: xPosToX,
    yPosToY: yPosToY
  });

  var newWaitingDoom = function(xPos,yPos,uuid){
    var doom = game.add.sprite(
      xPosToX(xPos)-FACE_WIDTH/2, yPosToY(yPos)-FACE_HEIGHT/2, 'doomfaces'
    );

    doom.animations.add('waiting',[4,4,4,4,4,4,3,5],2,true);
    doom.animations.play('waiting');

    souls.add(doom);
    doom.currentPos = [xPos,yPos];
    doom.uuid = uuid;

    return doom;
  }

  var resourceFromJSON = function(json) {
    var res = new Hyperagent.Resource();
    res._load(json);
    res.loaded = true;
    return res;
  }

  var clearGlows = selectionOverlay.clearGlows;
  var textToPos  = selectionOverlay.getText;
  var getGlow    = selectionOverlay.getGlow;

  var glowForActionsAtPos = function(rotation,xPos,yPos) {
    var x = xPosToX(xPos);
    var y = yPosToY(yPos);
    var glow = getGlow(x,y);

    var blink;
    var tweenForIndex = function(rotationIndex) {
      var action = rotation[rotationIndex % rotation.length];

      if(action == 'attack') {
        glow.frame = 0
      } else {
        glow.frame = 1
      }

      var text = textToPos(action.toUpperCase(), xPos, yPos);

      blink = game.add.tween(glow).to({alpha: 0.4},sliderContainer.blinkDelay/rotation.length,Phaser.Easing.Circular.Out,true);
      blink.onComplete.add(function() {
        blink = game.add.tween(glow).to({alpha: 0.0},sliderContainer.blinkDelay/rotation.length,Phaser.Easing.Circular.In,true);
        blink.onComplete.add(function() {
          text.destroy();
          tweenForIndex(rotationIndex+1);
        });
      });
    }
    tweenForIndex(0);

    var isDying = false;
    glow.fadeAndKill = function() {
      if(isDying) return;
      isDying = true;

      //blink.onComplete.removeAll();
      blink.stop();
      glow.events.onInputUp.removeAll();
      game.add.tween(glow).to({alpha: 0.0},sliderContainer.blinkDelay*(glow.alpha/0.4),Phaser.Easing.Quadratic.InOut,true,0)
        .onComplete.add(function() {
          glow.kill();
        });
    }
    return glow;
  }

  var drawMatrixGlows = function() {
    console.log(mm.all);
    $.each(mm.all, function(i,at) {
      var glow = glowForActionsAtPos(Object.keys(at.moves),at.x,at.y);
      glow.inputEnabled = true;
      glow.events.onInputUp.add(function(g) {
        clearGlows();

        var postToUrl = function(u) {
          $.ajax(u, {
            type: "POST",
            statusCode: {
              422: function (response) {
                //TODO: move this up out of the POST
                //game.add.tween(player).to({x: player.x-5},50,Phaser.Easing.Default,true,0,5,true);
              },
              500: function (response) {
                 location.reload();
              },
              403: function (response) {
                //TODO: auth lol
                //location.reload();
              }
            }
          });
        }

        if(Object.keys(at.moves).length == 1) {
          postToUrl(at.moves[Object.keys(at.moves)[0]]);
        } else {
          var offsets = [
            [+1,+1],
            [-1,+1],
            [+1,-1],
            [-1,-1]
          ]
          $.each(at.moves, function(name, url) {
            var offset = offsets.pop();
            var subGlow = glowForActionsAtPos([name], at.x+offset[0], at.y+offset[1]);
            subGlow.inputEnabled = true;
            subGlow.events.onInputUp.add(function(t) {
              postToUrl(url);
            }, this);
          });
        }
      });
    });
  }

  var loadGlowsForParticipant = function(participant) {
    mm = window.divided.moveMatrix();
    clearGlows();

    participant.links['dv:moves'].fetch().then(function (moves) {
      $.each(moves.embedded.moves, function(i,move) {
        var newMoves = {}
        newMoves[move.props.action] = move.url()
        mm.at(move.props.x,move.props.y).addMoves(newMoves);
      })

      drawMatrixGlows();
    });
  }

  var game = new Phaser.Game(800, 600, Phaser.AUTO, 'divided-viewport', {
    preload: function() {
      <%= %w(starfield.jpg slate_flooring_40x40.png 2x2brown40x40.png).map{|f| name=f.split('.').first; "game.load.image(#{name.inspect}, #{asset_path(f).inspect})" }.join(';') %>;
      game.load.spritesheet('doomfaces', <%= asset_path('doomfaces.png').inspect %>, FACE_WIDTH, FACE_HEIGHT, 42);
      game.load.spritesheet('lost_soul_basic', <%= asset_path('lost_soul_basic.png').inspect %>, 104, 90, 8);
      game.load.spritesheet('rgb_glow', <%= asset_path('rgb_120.png').inspect %>, 40, 40, 3);
      game.load.image('hourglass', <%= asset_path('hourglass_small.png').inspect %>);
      game.load.image('player_blip', <%= asset_path('green_blip_19.png').inspect %>);
    },
    create: function(){
      background = game.add.tileSprite(0, 0, 800, 600, 'starfield');
      walls = game.add.group();
      walls.add(game.add.tileSprite(160,60,480,40,'slate_flooring_40x40'));
      walls.add(game.add.tileSprite(160,500,480,40,'slate_flooring_40x40'));
      walls.add(game.add.tileSprite(160,100,40,400,'slate_flooring_40x40'));
      walls.add(game.add.tileSprite(600,100,40,400,'slate_flooring_40x40'));
      floor = game.add.tileSprite(200,100,400,400,'2x2brown40x40');

      souls = game.add.group();
      waitingIcons = game.add.group();

      selectionOverlay.setGame(game);

      player = newWaitingDoom(first_move[0],first_move[1],player_uuid);

      player.blip = game.add.sprite(14.5,-5,'player_blip',false);
      player.blip.anchor.setTo(0.5);
      player.addChild(player.blip);

      var waitingMap = {}
      var markAsChoosing = function(uuid) {
        var pos = playerPosMap[uuid];
        if(!pos || waitingMap[uuid]) return;

        console.log("marking as choosing");

        var icon = waitingIcons.getFirstDead();
        var x = xPosToX(pos[0])-20;
        var y = yPosToY(pos[1])-20;

        if (icon) {
          icon.reset(x,y);
          icon.alpha = 1;
        } else {
          icon = waitingIcons.create(x,y,'hourglass');
        }

        game.add.tween(icon).to({y: y-10},500,Phaser.Easing.Default,true,0,Number.MAX_VALUE,true);
        waitingMap[uuid] = icon;
      }

      var markAsWaiting = function(uuid) {
        console.log("marking as waiting");
        var img = waitingMap[uuid];
        if(!img) return;
        console.log('killing');
        game.add.tween(img)
          .to({y: img.y-20, alpha: 0},200,Phaser.Easing.Default,true)
          .onComplete.add(function(){
            img.kill();
          });
        delete waitingMap[uuid];
      }

      faye.subscribe('/room_events/waiting', function(payload) {
        console.log('waiting: '+payload);
        var data = JSON.parse(payload);
        if (data.current_round == turnCount) {
          console.log('marking');
          markAsWaiting(data.player_uuid);
        }
      });

      var moveSprite = function(sprite,nPos) {
        var cPos = sprite.currentPos;
        if (nPos[0] < cPos[0]) {
          sprite.animations.stop();
          sprite.animations.frame = 6;
        }
        else if (nPos[0] > cPos[0]) {
          sprite.animations.stop();
          sprite.animations.frame = 7;
        }
        else {
          sprite.animations.play('waiting');
        }

        cPos[0] = nPos[0];
        cPos[1] = nPos[1];

        game.add.tween(sprite).to({
          x: xPosToX(cPos[0])-sprite.width/2,
          y: yPosToY(cPos[1])-sprite.height/2
        }, sliderContainer.animationDuration, Phaser.Easing.Cubic.InOut, true);
      }

      faye.subscribe('/room_events/advance', function(payload) {
        console.log('advance! '+payload);
        var data = JSON.parse(payload);

        //TODO: Abstract out
        var hRound = resourceFromJSON(data.halRound);

        var hPlayer = $.grep(hRound.embedded.participants, function(participant,i) {
          return (participant.props.uuid == player_uuid);
        })[0];

        if(hPlayer !== undefined) {
          loadGlowsForParticipant(hPlayer);
        }

        $.each(waitingMap, function(uuid,_) {
          markAsWaiting(uuid);
        });

        var numOfPlayers = 0;
        for (k in data.players) {
          if (data.players.hasOwnProperty(k)) {
            numOfPlayers++;
          }
        }
        numOfPlayers-= data.killed.length;

        $.each(data.players, function(uuid,pos) {
          playerPosMap[uuid] = pos;
          console.log(data.players);
        });
        console.log('new pos map - '+JSON.stringify(playerPosMap))
        turnCount = data.current_round+1;

        $.each(playerPosMap, function(uuid, soulData) {
          var soul = souls.filter(function(s,i,group) {
              return s.alive && s.uuid == uuid
            }).first;
          if(soul){
            moveSprite(soul,soulData);
          } else {
            newWaitingDoom(soulData[0],soulData[1],uuid);
          }

          if(numOfPlayers > 1 && data.players.hasOwnProperty(uuid)) {
            markAsChoosing(uuid);
          }
        });

        if(turnTween !== undefined) {
          turnTween.stop();
          var fromAlpha = background.alpha/2;
          background.alpha = 1;
          turnTween = game.add.tween(background).from({alpha: fromAlpha},200,Phaser.Easing.Circular.Out,true);
        }

        $.each(souls.filter(function(s,i,group) {
          return $.inArray(s.uuid,data.killed) > -1
        }).list, function(i,soul) {
          soul.animations.stop();
          markAsWaiting(soul.uuid);
          delete playerPosMap[soul.uuid];
          if(soul.uuid === player_uuid) {
            isDead = true;
            turnTween.stop();
            background.alpha = 1;
            game.input.onUp.add(function(p){
              location.reload();
            },this);
            game.stage.backgroundColor = '#FF0000';
            game.add.tween(background).to({alpha: 0.0},100,Phaser.Easing.Circular.In,true)
              .onComplete.add(function(){
                soul.frame = 40;
                game.add.tween(background).to({alpha: 1.0},200,Phaser.Easing.Circular.Out,true)
                  .onComplete.add(function(){
                    game.stage.backgroundColor = '#880000';
                    game.add.tween(background).to({alpha: 0.0},10000,Phaser.Easing.Circular.Out,true);
                  });
              });
          } else {
            soul.frame = 40;
          }
        });

        if(!isDead) {
          var doTween = function(){
            turnTween = game.add.tween(background).to({alpha: 0.0},4600,Phaser.Easing.Circular.In,true);
          }
          if(turnTween !== undefined) {
            turnTween.onComplete.add(doTween);
          } else {
            doTween();
          }
        }
      });

      loadGlowsForParticipant(resourceFromJSON(window._divided_participant));
    },
    update: function(){
    }
  });
});
