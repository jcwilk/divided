//= require phaser

$(function() {
  var background, walls, floor, cursors;
  var xPosToX = function(xPos) {
    return xPos*40+20+200;
  }
  var yPosToY = function(yPos) {
    return xPosToX(yPos)-100;
  }
  var xToXPos = function(x) {
    return Math.round((x-20-200)/40);
  }
  var yToYPos = function(y) {
    return xToXPos(y+100);
  }
  var turnDue = true;
  var turnCount = 0;
  var endPending = false;

  var killGuard = false;
  var killTurnForInput = function() {
    if(killGuard) return;
    killGuard = true;
    setTimeout(function(){killGuard = false},100);
    killTurnIn(200);
  }

  var killTurnIn = function(delay) {
    var currentCount = turnCount;
    setTimeout(function(){
      if(currentCount == turnCount) turnDue = true
    },delay)
  }

  var player;
  var xPos = 0;
  var yPos = 0;
  var nextPos = [xPos,yPos];
  var currentPos = [xPos,yPos];

  var soul;
  var soulXPos = 9;
  var soulYPos = 9;
  var soulNextPos = [soulXPos,soulYPos];
  var soulCurrentPos = [soulXPos,soulYPos];

  var game = new Phaser.Game(800, 600, Phaser.AUTO, '', {
    preload: function() {
      <%= %w(starfield.jpg slate_flooring_40x40.png 2x2brown40x40.png).map{|f| name=f.split('.').first; "game.load.image(#{name.inspect}, #{asset_path(f).inspect})" }.join(';') %>;
      game.load.spritesheet('doomfaces', <%= asset_path('doomfaces.png').inspect %>, 30, 32, 42);
      game.load.spritesheet('lost_soul_basic', <%= asset_path('lost_soul_basic.png').inspect %>, 104, 90, 8);
    },
    create: function(){
      background = game.add.tileSprite(0, 0, 800, 600, 'starfield');
      walls = game.add.group();
      walls.add(game.add.tileSprite(160,60,480,40,'slate_flooring_40x40'));
      walls.add(game.add.tileSprite(160,500,480,40,'slate_flooring_40x40'));
      walls.add(game.add.tileSprite(160,100,40,400,'slate_flooring_40x40'));
      walls.add(game.add.tileSprite(600,100,40,400,'slate_flooring_40x40'));
      floor = game.add.tileSprite(200,100,400,400,'2x2brown40x40');

      player = game.add.sprite(0,0,'doomfaces');
      player.animations.add('waiting',[4,4,4,4,4,4,3,5],2,true);
      player.animations.play('waiting');

      soul = game.add.sprite(650,500,'lost_soul_basic');
      soul.animations.add('waiting',[0,1],2,true);
      soul.animations.add('explode',[1,2,2,3,3,4,5,6,7],6,false);
      soul.animations.play('waiting');

      cursors = game.input.keyboard.createCursorKeys();
    },
    update: function(){
      var nextX = nextPos[0];
      var nextY = nextPos[1];

      if (cursors.left.isDown)
      {
        nextPos[0] = currentPos[0]-1;
        killTurnForInput();
      }
      else if (cursors.right.isDown)
      {
        nextPos[0] = currentPos[0]+1;
        killTurnForInput();
      }

      if (cursors.up.isDown)
      {
        nextPos[1] = currentPos[1]-1;
        killTurnForInput();
      }
      else if (cursors.down.isDown)
      {
        nextPos[1] = currentPos[1]+1;
        killTurnForInput();
      }

      if (game.input.activePointer.isDown) {
        nextPos[0] = xToXPos(game.input.activePointer.x);
        nextPos[1] = yToYPos(game.input.activePointer.y);
        killTurnForInput();
      }

      if (turnDue) {
        turnCount+= 1;
        turnDue = false;
        killTurnIn(3000);

        if (nextPos[0] < currentPos[0]) {
          player.animations.stop();
          player.animations.frame = 6;
        }
        else if (nextPos[0] > currentPos[0]) {
          player.animations.stop();
          player.animations.frame = 7;
        }
        else {
          player.animations.play('waiting');
        }

        var moveSprite = function(sprite,cPos,nPos) {
          cPos[0] = nPos[0];
          cPos[1] = nPos[1];

          if(cPos[0] < 0) cPos[0] = 0;
          if(cPos[0] > 9) cPos[0] = 9;
          if(cPos[1] < 0) cPos[1] = 0;
          if(cPos[1] > 9) cPos[1] = 9;

          game.add.tween(sprite).to({
            x: xPosToX(cPos[0])-sprite.width/2,
            y: yPosToY(cPos[1])-sprite.height/2
          }, 100, Phaser.Easing.Cubic.InOut, true);
        }


        var isClose = function(){
          return Math.abs(soulCurrentPos[0]-currentPos[0]) <= 1 && Math.abs(soulCurrentPos[1]-currentPos[1]) <= 1;
        }

        if(!isClose()) {
          soulNextPos[0] = soulCurrentPos[0] + Math.round(Math.random()*6-3);
          soulNextPos[1] = soulCurrentPos[0] + Math.round(Math.random()*6-3);
          moveSprite(soul,soulCurrentPos,soulNextPos);
        }
        moveSprite(player,currentPos,nextPos);
        soul.animations.stop();
        if(isClose()) {
          soul.animations.play('explode');
        } else {
          soul.animations.play('waiting');
        }
      }
    }
  });
});
