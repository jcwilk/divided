//= require phaser-2.3.0.min
//= require move_matrix
//= require selection_overlay
//= require player_renderer
//= require player_pool

$(function() {
  var sliderContainer = {};
  var player_uuid = window._divided_player_uuid;
  var first_move = window._divided_first_move;

  var sliderChange =
  $('.slider').slider({min: 1, max: 5000,
    slide: function(event,ui){
      var varname = $(ui.handle.parentElement).data('variable');
      $('td#'+varname+'-display').html(ui.value);
      sliderContainer[varname] = ui.value;
    },
    create: function(event,ui){
      var target = $(event.target);
      var val = target.data('default');
      target.slider('option',{min: val/2, max: val*2});
      target.slider('value',target.data('default'));
      sliderContainer[target.data('variable')] = target.data('default');
    }
  });

  var background, walls, floor, cursors;
  var scaler = {
    xPosToX: function(xPos) {
      return (xPos*10+5-50)*scaler.scale;
    },
    yPosToY: function(yPos) {
      return scaler.xPosToX(yPos);
    },
    xToXPos: function(x) {
      return Math.round((x-5+50)/10/scaler.scale);
    },
    yToYPos: function(y) {
      return scaler.xToXPos(y);
    },
    scale: 4
  }

  var turnCount = 0;

  var faye = new Faye.Client('/faye');

  var isPointerDown = false;
  var isDead = false;

  var turnTween;

  var TILE_SIZE = 40;

  var selectionOverlay, playerPool;

  var resourceFromJSON = function(json) {
    var res = new Hyperagent.Resource();
    res._load(json);
    res.loaded = true;
    return res;
  }

  var loadingTextStyle = { font: "40px Arial", fill: "#ffffff", align: "center" };
  var loadingText;

  var firstHeight = window.innerHeight;
  var firstWidth = window.innerWidth;

  var resizeWorld = function() {
    height = window.innerHeight;
    width = window.innerWidth;
    game.scale.setGameSize(width,height);
    min = width > height*0.95 ? height*0.95 : width;
    var scale = Math.floor(min/100);
    if(scale < 1) scale = 1;
    if(floor !== undefined) {
      floor.scale.x = scale;
      floor.scale.y = scale;
    }
    scaler.scale = scale;

    if(selectionOverlay !== undefined) selectionOverlay.redraw()
    if(playerPool !== undefined) playerPool.redraw()
    if(background !== undefined) background.scale.set(scaler.scale)
    game.world.setBounds(0-width/2,0-height/2,width,height);
    game.camera.x = 0-width/2;
    game.camera.y = 0-height/2;
  }

  var game = new Phaser.Game(firstWidth, firstHeight, Phaser.CANVAS, 'divided-viewport', {
    init: function() {
      //Phaser.Canvas.setSmoothingEnabled(game.context, false);
      game.scale.scaleMode = Phaser.ScaleManager.NO_SCALE;
      game.scale.pageAlignHorizontally = true;
      game.scale.pageAlignVertically = true;
      resizeWorld();
      $(window).resize(resizeWorld);
    },
    preload: function() {
      game.scale.fullScreenScaleMode = Phaser.ScaleManager.NO_SCALE;
      game.input.onDown.add(function(){
        game.scale.startFullScreen(false);
        game.input.onDown.removeAll();
      },this);
      loadingText = game.add.text(0, 0, "Loading assets...", loadingTextStyle);
      loadingText.anchor.set(0.5);
      <%= %w(space_90.gif 100x100_pathway_dirt.gif).map{|f| name=f.split('.').first; "game.load.image(#{name.inspect}, #{asset_path(f).inspect})" }.join(';') %>;
      window.divided.playerRenderer.preload(game);
      game.load.spritesheet('rgb_glow', <%= asset_path('rotating_colors.png').inspect %>, 10, 10, 12);
      game.load.image('hourglass', <%= asset_path('hourglass_small.png').inspect %>);
      game.load.image('player_blip', <%= asset_path('green_blip_19.png').inspect %>);
    },
    create: function(){
      background = game.add.tileSprite(-1500, -1500, 3000, 3000, 'space_90');
      background.scale.set(scaler.scale)

      floor = game.add.sprite(0,0,'100x100_pathway_dirt');
      floor.anchor.set(0.5);
      floor.smoothed = false;
      floor.scale.set(scaler.scale);

      loadingText.destroy();
      loadingText = game.add.text(0, 0, "Waiting to join...", loadingTextStyle);
      loadingText.anchor.set(0.5);

      selectionOverlay = window.divided.selectionOverlay({
        scaler:    scaler,
        extConfig: sliderContainer,
        game:      game
      });

      playerPool = window.divided.playerPool({
        scaler:                 scaler,
        game:                   game,
        loadingText:            loadingText,
        directingPlayerUuid:    player_uuid,
        extConfig:              sliderContainer,
        onDirectingPlayerDeath: function() {
          isDead = true;
          if(turnTween !== undefined) {
            turnTween.stop();
          }
          background.alpha = 1;
          game.input.onUp.add(function(p) {
            location.reload();
          },this);
          game.stage.backgroundColor = '#FF0000';
          game.add.tween(background).to({alpha: 0.0},100,Phaser.Easing.Circular.In,true)
            .onComplete.add(function(){
              game.add.tween(background).to({alpha: 1.0},200,Phaser.Easing.Circular.Out,true)
                .onComplete.add(function(){
                  game.stage.backgroundColor = '#880000';
                  game.add.tween(background).to({alpha: 0.0},10000,Phaser.Easing.Circular.Out,true);
                });
            });
        }
      });

      faye.subscribe('/room_events/waiting', function(payload) {
        var data = JSON.parse(payload);
        if (data.current_round == turnCount) {
          playerPool.markAsWaiting(data.player_uuid);
        }
      });

      faye.subscribe('/room_events/advance', function(payload) {
        var data = JSON.parse(payload);
        turnCount = data.current_round+1;
        var stillThisRound = function() {
          return turnCount == data.current_round+1;
        }

        //TODO: Abstract out
        var hRound = resourceFromJSON(data.halRound);

        var hPlayer = $.grep(hRound.embedded.participants, function(participant,i) {
          return (participant.props.uuid == player_uuid);
        })[0];

        playerPool.nextRound(function(r) {
          $.each(data.players, function(uuid,pos) {
            if($.inArray(uuid, data.killed) >= 0) {
              r.register(uuid).at(pos[0],pos[1]).kill();
            } else {
              r.register(uuid).at(pos[0],pos[1]);
            }
          });
        });

        if(hPlayer !== undefined) {
          selectionOverlay.selectionForParticipant(hPlayer).then(function(val){
            if(stillThisRound()) {
              return val;
            } else {
              throw new Error("Selection made after round ended!");
            }
          }).then(function(val) {
            playerPool.displayAllChoosing();
            return val;
          }).done();
        }

        if(!isDead) {
          var doTween = function(){
            turnTween = game.add.tween(background).to({alpha: 0.0},4600,Phaser.Easing.Circular.In,true);
          }
          if(turnTween !== undefined) {
            turnTween.stop();
            turnTween = game.add.tween(background).to({alpha: 1},200,Phaser.Easing.Bounce.In,true);
            turnTween.onComplete.add(doTween);
          } else {
            doTween();
          }
        }
      }).then(function(){
        //faye subscription to turn advancement is now active
        var room = resourceFromJSON(window._divided_room);
        $.ajax({
          url: room.links['dv:join'].url(),
          headers: {
              'Uuid': player_uuid
          },
          method: 'POST',
          success: function(data){
            console.log('joined: '+data);
            //debugger;
          },
          error: function(error){
            //debugger
          }
        });
      });
    },
    update: function(){
    }
  });
});
